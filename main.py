#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import os
from database import TemplateDatabase

def clear_screen():
    """–û—á–∏—â–∞–µ—Ç —ç–∫—Ä–∞–Ω –∫–æ–Ω—Å–æ–ª–∏"""
    os.system('cls' if os.name == 'nt' else 'clear')

def show_main_menu():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    print("=" * 50)
    print("           –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –í–ê–ö–ê–ù–°–ò–Ø–ú–ò")
    print("=" * 50)
    print()
    print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    print("1. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≤–∞–∫–∞–Ω—Å–∏—é")
    print("2. –í—ã–±—Ä–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤–∞–∫–∞–Ω—Å–∏—é")
    print("0. –í—ã—Ö–æ–¥")
    print()

def show_template_menu():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞"""
    print("=" * 50)
    print("           –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ô –í–ê–ö–ê–ù–°–ò–ò")
    print("=" * 50)
    print()
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —à–∞–±–ª–æ–Ω–∞:")
    print("1. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω")
    print("2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–æ—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω")
    print("0. –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    print()

def format_file_size(size_bytes):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if size_bytes is None:
        return "N/A"
    
    if size_bytes < 1024:
        return f"{size_bytes} B"
    elif size_bytes < 1024 * 1024:
        return f"{size_bytes / 1024:.1f} KB"
    elif size_bytes < 1024 * 1024 * 1024:
        return f"{size_bytes / (1024 * 1024):.1f} MB"
    else:
        return f"{size_bytes / (1024 * 1024 * 1024):.1f} GB"

def get_application_deadline():
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–∞–±–æ—Ä–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    from datetime import datetime
    
    while True:
        try:
            deadline_input = input("\nüìÖ –î–æ –∫–∞–∫–æ–≥–æ —á–∏—Å–ª–∞ –Ω–∞–±–æ—Ä –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å? (—Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –î–î/–ú–ú/–ì–ì–ì–ì): ").strip()
            
            if not deadline_input:
                print("‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π")
                continue
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç—ã
            date_formats = ["%d.%m.%Y", "%d/%m/%Y", "%d-%m-%Y", "%Y-%m-%d"]
            deadline_date = None
            
            for fmt in date_formats:
                try:
                    deadline_date = datetime.strptime(deadline_input, fmt)
                    break
                except ValueError:
                    continue
            
            if deadline_date:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º
                if deadline_date.date() < datetime.now().date():
                    print("‚ùå –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º")
                    continue
                
                return deadline_date.strftime("%Y-%m-%d")
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –î–î/–ú–ú/–ì–ì–ì–ì")
                
        except KeyboardInterrupt:
            print("\n‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def get_positions_count():
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    while True:
        try:
            count_input = input("\nüë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ –Ω–∞ —ç—Ç—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å: ").strip()
            
            if not count_input:
                print("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                continue
            
            count = int(count_input)
            
            if count <= 0:
                print("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
                continue
            
            if count > 1000:
                print("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 1000")
                continue
            
            return count
            
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
        except KeyboardInterrupt:
            print("\n‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def get_user_choice(min_choice, max_choice):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    while True:
        try:
            choice = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤—ã–±–æ—Ä–∞: "))
            if min_choice <= choice <= max_choice:
                return choice
            else:
                print(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç {min_choice} –¥–æ {max_choice}")
        except ValueError:
            print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")

def show_files_from_uploads():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ uploads"""
    uploads_dir = "uploads"
    
    if not os.path.exists(uploads_dir):
        print("–ü–∞–ø–∫–∞ uploads –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return []
    
    files = []
    for filename in os.listdir(uploads_dir):
        file_path = os.path.join(uploads_dir, filename)
        if os.path.isfile(file_path):
            files.append(file_path)
    
    if not files:
        print("–í –ø–∞–ø–∫–µ uploads –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤.")
        return []
    
    print("=" * 60)
    print("           –î–û–°–¢–£–ü–ù–´–ï –§–ê–ô–õ–´ –ò–ó –ü–ê–ü–ö–ò UPLOADS")
    print("=" * 60)
    print()
    print(f"{'‚Ññ':<3} {'–ù–∞–∑–≤–∞–Ω–∏–µ':<35} {'–¢–∏–ø':<8} {'–†–∞–∑–º–µ—Ä':<10}")
    print("-" * 70)
    
    for i, file_path in enumerate(files, 1):
        filename = os.path.basename(file_path)
        file_ext = os.path.splitext(filename)[1].lower()[1:] if os.path.splitext(filename)[1] else "unknown"
        file_size = os.path.getsize(file_path)
        
        # –û–±—Ä–µ–∑–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        display_name = filename[:32] + "..." if len(filename) > 35 else filename
        size_str = format_file_size(file_size)
        
        print(f"{i:<3} {display_name:<35} {file_ext:<8} {size_str:<10}")
    
    print("0. –ù–∞–∑–∞–¥")
    print()
    return files

def handle_new_vacancy():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏"""
    while True:
        clear_screen()
        show_template_menu()
        choice = get_user_choice(0, 2)
        
        if choice == 1:
            handle_create_new_template()
            break
        elif choice == 2:
            print("\n–í—ã–±—Ä–∞–Ω–æ: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–æ—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ç–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
            break
        elif choice == 0:
            break

def handle_create_new_template():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ —Å –≤—ã–±–æ—Ä–æ–º —Ñ–∞–π–ª–∞ –∏–∑ uploads"""
    while True:
        clear_screen()
        files = show_files_from_uploads()
        
        if not files:
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞...")
            break
        
        max_choice = len(files)
        choice = get_user_choice(0, max_choice)
        
        if choice == 0:
            break
        else:
            selected_file = files[choice - 1]
            filename = os.path.basename(selected_file)
            file_ext = os.path.splitext(filename)[1].lower()[1:] if os.path.splitext(filename)[1] else "unknown"
            file_size = os.path.getsize(selected_file)
            
            print(f"\n–í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {filename}")
            print(f"–¢–∏–ø —Ñ–∞–π–ª–∞: {file_ext}")
            print(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {format_file_size(file_size)}")
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
            if file_ext.lower() == 'pdf':
                print(f"\n–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF —Ñ–∞–π–ª–∞ '{filename}'...")
                
                try:
                    from pdf_text_extractor import PDFTextExtractor
                    extractor = PDFTextExtractor(selected_file)
                    content = extractor.extract_all()
                    
                    if content:
                        print(f"‚úì –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ PDF!")
                        print(f"  - –°—Ç—Ä–∞–Ω–∏—Ü: {content.pages_count}")
                        print(f"  - –°–µ–∫—Ü–∏–π –Ω–∞–π–¥–µ–Ω–æ: {len(content.structured_sections)}")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
                        print(f"\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ:")
                        print(f"  - –ó–∞–≥–æ–ª–æ–≤–æ–∫: {content.title}")
                        print(f"  - –ê–≤—Ç–æ—Ä: {content.author}")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–µ–∫—Ü–∏–∏
                        if content.structured_sections:
                            print(f"\n–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–µ–∫—Ü–∏–∏:")
                            for section_name in content.structured_sections.keys():
                                print(f"  - {section_name}")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞
                        print(f"\n–ù–∞—á–∞–ª–æ —Ç–µ–∫—Å—Ç–∞:")
                        preview = content.full_text[:200] + "..." if len(content.full_text) > 200 else content.full_text
                        print(f"  {preview}")
                        
                        # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é –ò–ò
                        print(f"\n–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò...")
                        try:
                            from ai import AIStructuredExtractor
                            ai_extractor = AIStructuredExtractor()
                            structured_data = ai_extractor.structure_vacancy_text(content.full_text)
                            formatted_data = ai_extractor.format_structured_data(structured_data)
                            
                            print(f"‚úì –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω!")
                            print(f"\n{formatted_data}")
                            
                            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ ZoneJobBot
                            job_title = structured_data.get("job_info", {}).get("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏", "")
                            if job_title and job_title != "–ù–µ —É–∫–∞–∑–∞–Ω–æ":
                                print(f"\nüîç –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏: '{job_title}'...")
                                try:
                                    sys.path.append(os.path.join(os.path.dirname(__file__), 'job'))
                                    from zone_job_bot import ZoneJobBot
                                    
                                    job_bot = ZoneJobBot()
                                    job_details = job_bot.process_request(job_title)
                                    
                                    print(f"‚úì –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞!")
                                    print(f"\n{job_details}")
                                    
                                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏ Knowledge Areas
                                    print(f"\nüîç –ê–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏ –æ–±–ª–∞—Å—Ç–µ–π –∑–Ω–∞–Ω–∏–π...")
                                    try:
                                        from knowledge_matcher import KnowledgeMatcher
                                        
                                        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏–∑ job_bot
                                        job_code = job_bot.get_last_job_code()
                                        
                                        if job_code and hasattr(job_bot, 'knowledge_skills'):
                                            job_knowledge = job_bot.get_knowledge_skills(job_code)
                                            if job_knowledge.get('knowledge'):
                                                matcher = KnowledgeMatcher()
                                                analysis = matcher.analyze_knowledge_coverage(structured_data, job_knowledge['knowledge'])
                                                analysis_result = matcher.format_analysis_result(analysis)
                                                
                                                print(f"‚úì –ê–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω!")
                                                print(f"\n{analysis_result}")
                                                
                                                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –æ–±–ª–∞—Å—Ç–∏
                                                if analysis['missing_areas']:
                                                    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
                                                    print("–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π:")
                                                    for area, score in analysis['missing_areas'][:3]:  # –¢–æ–ø-3
                                                        print(f"   ‚Ä¢ {area} (–≤–∞–∂–Ω–æ—Å—Ç—å: {score:.1f}/5.0)")
                                            else:
                                                print("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –æ –∑–Ω–∞–Ω–∏—è—Ö –¥–ª—è —ç—Ç–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                                        else:
                                            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–¥ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–Ω–∞–Ω–∏–π")
                                            
                                    except ImportError:
                                        print("‚úó –ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏–∑–∞ –∑–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
                                    except Exception as e:
                                        print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∑–Ω–∞–Ω–∏–π: {e}")
                                    
                                except ImportError:
                                    print("‚úó –ú–æ–¥—É–ª—å ZoneJobBot –Ω–µ –Ω–∞–π–¥–µ–Ω")
                                except Exception as e:
                                    print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
                            else:
                                print("‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                            
                        except ImportError:
                            print("‚úó –ú–æ–¥—É–ª—å –ò–ò –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        except Exception as e:
                            print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
                        
                        print(f"\n‚úì –§–∞–π–ª '{filename}' –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –≥–æ—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏!")
                        
                        # –°–æ–±–∏—Ä–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        print(f"\nüìù –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –î–õ–Ø –í–ê–ö–ê–ù–°–ò–ò")
                        print("=" * 50)
                        
                        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–∞–±–æ—Ä–∞
                        application_deadline = get_application_deadline()
                        if application_deadline is None:
                            print("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                            break
                        
                        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫
                        positions_count = get_positions_count()
                        if positions_count is None:
                            print("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                            break
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–∫–∞–Ω—Å–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                        print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
                        try:
                            db = TemplateDatabase()
                            
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                            job_title = structured_data.get("job_info", {}).get("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏", filename)
                            job_description = content.full_text if 'content' in locals() else ""
                            region = structured_data.get("job_info", {}).get("–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", "")
                            salary_min = structured_data.get("salary", {}).get("–ó–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç", "")
                            salary_max = structured_data.get("salary", {}).get("–ó–∞—Ä–ø–ª–∞—Ç–∞ –¥–æ", "")
                            
                            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞—Ä–ø–ª–∞—Ç—ã
                            try:
                                if salary_min and salary_min != "–ù–µ —É–∫–∞–∑–∞–Ω–æ":
                                    salary_min = int(''.join(filter(str.isdigit, str(salary_min))))
                                else:
                                    salary_min = None
                            except:
                                salary_min = None
                                
                            try:
                                if salary_max and salary_max != "–ù–µ —É–∫–∞–∑–∞–Ω–æ":
                                    salary_max = int(''.join(filter(str.isdigit, str(salary_max))))
                                else:
                                    salary_max = None
                            except:
                                salary_max = None
                            
                            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–æ–Ω–µ –∏ –∫–æ–¥–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏–∑ job_bot –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
                            job_zone = None
                            job_code = None
                            if 'job_bot' in locals() and hasattr(job_bot, 'last_selected_job'):
                                job_zone = 3  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–æ–Ω–∞ 3
                                job_code = job_bot.get_last_job_code()
                            
                            vacancy_id = db.add_vacancy(
                                name=filename,
                                content=job_description,
                                file_type=file_type,
                                file_path=selected_file,
                                pdf_path=pdf_path if 'pdf_path' in locals() else None,
                                job_title=job_title,
                                job_description=job_description,
                                application_deadline=application_deadline,
                                positions_count=positions_count,
                                region=region,
                                salary_min=salary_min,
                                salary_max=salary_max,
                                job_zone=job_zone,
                                job_code=job_code
                            )
                            
                            print(f"‚úì –í–∞–∫–∞–Ω—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
                            print(f"  ID –≤–∞–∫–∞–Ω—Å–∏–∏: {vacancy_id}")
                            print(f"  –ù–∞–∑–≤–∞–Ω–∏–µ: {job_title}")
                            print(f"  –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–∞–±–æ—Ä–∞: {application_deadline}")
                            print(f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π: {positions_count}")
                            print(f"  –†–µ–≥–∏–æ–Ω: {region}")
                            
                        except Exception as e:
                            print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
                        
                    else:
                        print("‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF")
                        
                except ImportError:
                    print("‚úó –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                    print("  –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install PyPDF2 pdfplumber")
                except Exception as e:
                    print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
                
                input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                break
            else:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PDF
                print(f"\n–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–∞ '{filename}' –≤ PDF...")
                from pdf_converter import PDFConverter
                
                converter = PDFConverter()
                if not converter.is_libreoffice_available():
                    print("‚úó LibreOffice –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ LibreOffice –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤.")
                    input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                    continue
                
                if not converter.can_convert(selected_file):
                    print(f"‚úó –§–∞–π–ª –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {file_ext}")
                    input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                    continue
                
                try:
                    pdf_path = converter.convert_to_pdf(selected_file)
                    if pdf_path:
                        print(f"‚úì –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ PDF: {os.path.basename(pdf_path)}")
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ PDF
                        print(f"–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ PDF...")
                        try:
                            from pdf_text_extractor import PDFTextExtractor
                            extractor = PDFTextExtractor(pdf_path)
                            content = extractor.extract_all()
                            
                            if content:
                                print(f"‚úì –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ PDF!")
                                print(f"  - –°—Ç—Ä–∞–Ω–∏—Ü: {content.pages_count}")
                                print(f"  - –°–µ–∫—Ü–∏–π –Ω–∞–π–¥–µ–Ω–æ: {len(content.structured_sections)}")
                                
                                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                                print(f"\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ:")
                                print(f"  - –ó–∞–≥–æ–ª–æ–≤–æ–∫: {content.title}")
                                print(f"  - –ê–≤—Ç–æ—Ä: {content.author}")
                                
                                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–µ–∫—Ü–∏–∏
                                if content.structured_sections:
                                    print(f"\n–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–µ–∫—Ü–∏–∏:")
                                    for section_name in content.structured_sections.keys():
                                        print(f"  - {section_name}")
                                
                                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞
                                print(f"\n–ù–∞—á–∞–ª–æ —Ç–µ–∫—Å—Ç–∞:")
                                preview = content.full_text[:200] + "..." if len(content.full_text) > 200 else content.full_text
                                print(f"  {preview}")
                                
                                # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é –ò–ò
                                print(f"\n–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò...")
                                try:
                                    from ai import AIStructuredExtractor
                                    ai_extractor = AIStructuredExtractor()
                                    structured_data = ai_extractor.structure_vacancy_text(content.full_text)
                                    formatted_data = ai_extractor.format_structured_data(structured_data)
                                    
                                    print(f"‚úì –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω!")
                                    print(f"\n{formatted_data}")
                                    
                                    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ ZoneJobBot
                                    job_title = structured_data.get("job_info", {}).get("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏", "")
                                    if job_title and job_title != "–ù–µ —É–∫–∞–∑–∞–Ω–æ":
                                        print(f"\nüîç –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏: '{job_title}'...")
                                        try:
                                            sys.path.append(os.path.join(os.path.dirname(__file__), 'job'))
                                            from zone_job_bot import ZoneJobBot
                                            
                                            job_bot = ZoneJobBot()
                                            job_details = job_bot.process_request(job_title)
                                            
                                            print(f"‚úì –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞!")
                                            print(f"\n{job_details}")
                                            
                                            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏ Knowledge Areas
                                            print(f"\nüîç –ê–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏ –æ–±–ª–∞—Å—Ç–µ–π –∑–Ω–∞–Ω–∏–π...")
                                            try:
                                                from knowledge_matcher import KnowledgeMatcher
                                                
                                                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏–∑ job_bot
                                                job_code = job_bot.get_last_job_code()
                                                
                                                if job_code and hasattr(job_bot, 'knowledge_skills'):
                                                    job_knowledge = job_bot.get_knowledge_skills(job_code)
                                                    if job_knowledge.get('knowledge'):
                                                        matcher = KnowledgeMatcher()
                                                        analysis = matcher.analyze_knowledge_coverage(structured_data, job_knowledge['knowledge'])
                                                        analysis_result = matcher.format_analysis_result(analysis)
                                                        
                                                        print(f"‚úì –ê–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω!")
                                                        print(f"\n{analysis_result}")
                                                        
                                                        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –æ–±–ª–∞—Å—Ç–∏
                                                        if analysis['missing_areas']:
                                                            print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
                                                            print("–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π:")
                                                            for area, score in analysis['missing_areas'][:3]:  # –¢–æ–ø-3
                                                                print(f"   ‚Ä¢ {area} (–≤–∞–∂–Ω–æ—Å—Ç—å: {score:.1f}/5.0)")
                                                    else:
                                                        print("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –æ –∑–Ω–∞–Ω–∏—è—Ö –¥–ª—è —ç—Ç–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                                                else:
                                                    print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–¥ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–Ω–∞–Ω–∏–π")
                                                    
                                            except ImportError:
                                                print("‚úó –ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏–∑–∞ –∑–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
                                            except Exception as e:
                                                print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∑–Ω–∞–Ω–∏–π: {e}")
                                            
                                        except ImportError:
                                            print("‚úó –ú–æ–¥—É–ª—å ZoneJobBot –Ω–µ –Ω–∞–π–¥–µ–Ω")
                                        except Exception as e:
                                            print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
                                    else:
                                        print("‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                                    
                                except ImportError:
                                    print("‚úó –ú–æ–¥—É–ª—å –ò–ò –Ω–µ –Ω–∞–π–¥–µ–Ω")
                                except Exception as e:
                                    print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
                                
                                print(f"\n‚úì –§–∞–π–ª '{filename}' –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏!")
                                
                                # –°–æ–±–∏—Ä–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                                print(f"\nüìù –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –î–õ–Ø –í–ê–ö–ê–ù–°–ò–ò")
                                print("=" * 50)
                                
                                # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–∞–±–æ—Ä–∞
                                application_deadline = get_application_deadline()
                                if application_deadline is None:
                                    print("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                                    input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                                    break
                                
                                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫
                                positions_count = get_positions_count()
                                if positions_count is None:
                                    print("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                                    input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                                    break
                                
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–∫–∞–Ω—Å–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                                print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
                                try:
                                    db = TemplateDatabase()
                                    
                                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                                    job_title = structured_data.get("job_info", {}).get("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏", filename)
                                    job_description = content.full_text if 'content' in locals() else ""
                                    region = structured_data.get("job_info", {}).get("–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", "")
                                    salary_min = structured_data.get("salary", {}).get("–ó–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç", "")
                                    salary_max = structured_data.get("salary", {}).get("–ó–∞—Ä–ø–ª–∞—Ç–∞ –¥–æ", "")
                                    
                                    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞—Ä–ø–ª–∞—Ç—ã
                                    try:
                                        if salary_min and salary_min != "–ù–µ —É–∫–∞–∑–∞–Ω–æ":
                                            salary_min = int(''.join(filter(str.isdigit, str(salary_min))))
                                        else:
                                            salary_min = None
                                    except:
                                        salary_min = None
                                        
                                    try:
                                        if salary_max and salary_max != "–ù–µ —É–∫–∞–∑–∞–Ω–æ":
                                            salary_max = int(''.join(filter(str.isdigit, str(salary_max))))
                                        else:
                                            salary_max = None
                                    except:
                                        salary_max = None
                                    
                                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–æ–Ω–µ –∏ –∫–æ–¥–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏–∑ job_bot –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
                                    job_zone = None
                                    job_code = None
                                    if 'job_bot' in locals() and hasattr(job_bot, 'last_selected_job'):
                                        job_zone = 3  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–æ–Ω–∞ 3
                                        job_code = job_bot.get_last_job_code()
                                    
                                    vacancy_id = db.add_vacancy(
                                        name=filename,
                                        content=job_description,
                                        file_type=file_type,
                                        file_path=selected_file,
                                        pdf_path=pdf_path,
                                        job_title=job_title,
                                        job_description=job_description,
                                        application_deadline=application_deadline,
                                        positions_count=positions_count,
                                        region=region,
                                        salary_min=salary_min,
                                        salary_max=salary_max,
                                        job_zone=job_zone,
                                        job_code=job_code
                                    )
                                    
                                    print(f"‚úì –í–∞–∫–∞–Ω—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
                                    print(f"  ID –≤–∞–∫–∞–Ω—Å–∏–∏: {vacancy_id}")
                                    print(f"  –ù–∞–∑–≤–∞–Ω–∏–µ: {job_title}")
                                    print(f"  –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–∞–±–æ—Ä–∞: {application_deadline}")
                                    print(f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π: {positions_count}")
                                    print(f"  –†–µ–≥–∏–æ–Ω: {region}")
                                    
                                except Exception as e:
                                    print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
                                
                            else:
                                print("‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ PDF")
                                
                        except ImportError:
                            print("‚úó –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                            print("  –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install PyPDF2 pdfplumber")
                        except Exception as e:
                            print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
                            print(f"‚úì –§–∞–π–ª '{filename}' –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ PDF, –Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å")
                    else:
                        print("‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ –≤ PDF")
                except Exception as e:
                    print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
                
                input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                break

def handle_existing_vacancy():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏"""
    print("\n–í—ã–±—Ä–∞–Ω–æ: –í—ã–±—Ä–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤–∞–∫–∞–Ω—Å–∏—é")
    input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    while True:
        clear_screen()
        show_main_menu()
        choice = get_user_choice(0, 2)
        
        if choice == 1:
            handle_new_vacancy()
        elif choice == 2:
            handle_existing_vacancy()
        elif choice == 0:
            print("\n–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            sys.exit(0)

if __name__ == "__main__":
    main()
